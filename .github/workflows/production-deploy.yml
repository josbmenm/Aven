name: Ono Production Deploy Skynet

on:
  push:
    branches:
      - cameron/*

# Copy this file for a new deploy
# Changes:
#  - hostname: `skynet.onoblends.co` -> new domain
#  - secret names: `SKYNET_*` -> NEW_NAME_*
#  - host keys: `skynet.onoblends.co ecdsa-sha2-ni...` -> `ssh-keyscan skynet.onoblends.co 2>/dev/null`

# Expected pre-setup
# hostname -> IP in DNS

# Expected Secrets
#
# - target credentials (SKYNET_DEPLOY_KEY)
#   $ (mkfifo key key.pub && cat key key.pub &) && echo "y" | ssh-keygen -t rsa -b 4096 -C "GitHub Action $(date +%Y-%m-%d)" -N '' -q -f key 2>&1 > /dev/null ; rm key key.pub
# - journalbeat credentials (SKYNET_JOURNALBEAT_API__KEY)
# - Any other secrets to send to remote (See "Build Secrets File" step)

jobs:
  prepare-server:
    name: Prepare Production Server
    runs-on: ubuntu-latest

    steps:
      - name: Test for needed Secret
        env:
          KEY: ${{ secrets.SKYNET_DEPLOY_KEY }}
        run: '[ "$KEY" != "" ]'

      - name: Checkout master
        uses: actions/checkout@master

      - name: Npm Cache
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: npm-${{ runner.os }}-node-${{ hashFiles('production-server-prepare/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-
            npm-${{ runner.os }}-

      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: production-server-prepare/node_modules
          key: deploy-skynet-modules-${{ runner.os }}-node-${{ hashFiles('production-server-prepare/package-lock.json') }}
          restore-keys: |
            prepare-server-modules-${{ runner.os }}-build-${{ env.cache-name }}-
            prepare-server-modules-${{ runner.os }}-build-
            prepare-server-modules-${{ runner.os }}-

      - name: Configure Npm
        run: |
          echo "color = always" >> .npmrc

      - name: Install Dependencies
        working-directory: production-server-prepare
        run: npm ci

      - name: Build Script for remote server setup
        working-directory: production-server-prepare
        run: npm build

      - name: Install key file
        id: key
        env:
          KEY: ${{ secrets.SKYNET_DEPLOY_KEY }}
        run: |
          echo "$KEY" > deploy.key
          chmod go-rwx deploy.key
          echo "::set-output name=filename::$(pwd)/deploy.key"

      - name: Add SSH configs
        run: |
          mkdir -p ~/.ssh
          echo "skynet.onoblends.co ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHPfzupCfPSZak6Ql1wy8Co2nP/5zWGxkjACX+1sHsZsYpJ2hi/+g7AyXC5ebcuKLwpeJMsdVBRCvwsa7RySFYY=" >> ~/.ssh/known_hosts
          echo Host deploy-server > ~/.ssh/config
          echo HostName skynet.onoblends.co >> ~/.ssh/config
          echo Port 22 >>  ~/.ssh/config
          echo User root >> ~/.ssh/config
          echo CheckHostIP no >> ~/.ssh/config
          echo IdentityFile ${{ steps.key.outputs.filename }} >> ~/.ssh/config

      - name: Run Prepare Script on Remote
        working-directory: production-server-prepare
        run: |
          rsync dist/ deploy-server:
          ssh deploy-server bash index.sh

      - name: Cleanup
        if: always()
        run: |
          rm ${{ steps.key.outputs.filename }}

  deploy-skynet:
    needs: [prepare-server] # Make sure production server is setup before we deploy to it
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@master

      - name: --------- Setup Environment -----------------------------------------------------------------------------
        run: ':'

      - name: Get Yarn Cache Dir
        id: yarn-cache
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-cache-${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}-build-${{ env.cache-name }}-
            yarn-cache-${{ runner.os }}-build-
            yarn-cache-${{ runner.os }}-

      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: deploy-skynet-modules-${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            deploy-skynet-modules-${{ runner.os }}-build-${{ env.cache-name }}-
            deploy-skynet-modules-${{ runner.os }}-build-
            deploy-skynet-modules-${{ runner.os }}-

      - name: Configure Yarn
        run: | # I think yarn loads these
          echo "color = always" >> .npmrc

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: --------- Build Skynet ----------------------------------------------------------------------------------
        run: ':'

      - name: Build Skynet
        id: build
        # Has output: steps.build.outputs.path
        run: yarn deploy skynet

      - name: Build Secrets File
        env:
          AIRTABLE_API_KEY: ${{ toJson(secrets.AIRTABLE_API_KEY) }}
          AIRTABLE_BASE_ID: ${{ toJson(secrets.AIRTABLE_BASE_ID) }}
          ELASTIC_SECRET: ${{ toJson(secrets.ELASTIC_SECRET) }}
          ELASTIC_USERNAME: ${{ toJson(secrets.ELASTIC_USERNAME) }}
          GCS_BUCKET: ${{ toJson(secrets.GCS_BUCKET) }}
          GCS_TOKEN: ${{ toJson(secrets.GCS_TOKEN) }}
          ONO_ROOT_PASSWORD: ${{ toJson(secrets.ONO_ROOT_PASSWORD) }}
          SENDGRID_API_KEY: ${{ toJson(secrets.SENDGRID_API_KEY) }}
          SQL_PASSWORD: ${{ toJson(secrets.SQL_PASSWORD) }}
          SQL_USER: ${{ toJson(secrets.SQL_USER) }}
          STRIPE_LIVE_TOKEN: ${{ toJson(secrets.STRIPE_LIVE_TOKEN) }}
          STRIPE_TOKEN: ${{ toJson(secrets.STRIPE_TOKEN) }}
          TWILIO_ACCOUNT_SID: ${{ toJson(secrets.TWILIO_ACCOUNT_SID) }}
          TWILIO_AUTH_TOKEN: ${{ toJson(secrets.TWILIO_AUTH_TOKEN) }}
        run: |
          echo "[Service]" > secrets.conf
          echo Environment=AIRTABLE_API_KEY="${AIRTABLE_API_KEY}" >> secrets.conf
          echo Environment=AIRTABLE_BASE_ID="${AIRTABLE_BASE_ID}" >> secrets.conf
          echo Environment=ELASTIC_SECRET="${ELASTIC_SECRET}" >> secrets.conf
          echo Environment=ELASTIC_USERNAME="${ELASTIC_USERNAME}" >> secrets.conf
          echo Environment=GCS_BUCKET="${GCS_BUCKET}" >> secrets.conf
          echo Environment=GCS_TOKEN="${GCS_TOKEN}" >> secrets.conf
          echo Environment=ONO_ROOT_PASSWORD="${ONO_ROOT_PASSWORD}" >> secrets.conf
          echo Environment=SENDGRID_API_KEY="${SENDGRID_API_KEY}" >> secrets.conf
          echo Environment=SQL_PASSWORD="${SQL_PASSWORD}" >> secrets.conf
          echo Environment=SQL_USER="${SQL_USER}" >> secrets.conf
          echo Environment=STRIPE_LIVE_TOKEN="${STRIPE_LIVE_TOKEN}" >> secrets.conf
          echo Environment=STRIPE_TOKEN="${STRIPE_TOKEN}" >> secrets.conf
          echo Environment=TWILIO_ACCOUNT_SID="${TWILIO_ACCOUNT_SID}" >> secrets.conf
          echo Environment=TWILIO_AUTH_TOKEN="${TWILIO_AUTH_TOKEN}" >> secrets.conf

      - name: Build Configs File
        env:
          DATABASE_URL: ${{ toJson(secrets.DATABASE_URL) }}
          ELASTIC_HOST: ${{ toJson(secrets.ELASTIC_HOST) }}
          SQL_DATABASE: ${{ toJson(secrets.SQL_DATABASE) }}
          SQL_HOST: ${{ toJson(secrets.SQL_HOST) }}
          SQL_USE_SSL: ${{ toJson(secrets.SQL_USE_SSL) }}
          TWILIO_FROM_NUMBER: ${{ toJson(secrets.TWILIO_FROM_NUMBER) }}
        run: |
          echo "[Service]" > configs.conf
          echo Environment=DATABASE_URL="${DATABASE_URL}" >> configs.conf
          echo Environment=ELASTIC_HOST="${ELASTIC_HOST}" >> configs.conf
          echo Environment=SQL_DATABASE="${SQL_DATABASE}" >> configs.conf
          echo Environment=SQL_HOST="${SQL_HOST}" >> configs.conf
          echo Environment=SQL_USE_SSL="${SQL_USE_SSL}" >> configs.conf
          echo Environment=TWILIO_FROM_NUMBER="${TWILIO_FROM_NUMBER}" >> configs.conf

      - name: --------- Deploy Credentials ----------------------------------------------------------------------------
        run: ':'

      - name: Install key file
        id: key
        env:
          KEY: ${{ secrets.SKYNET_DEPLOY_KEY }}
        run: |
          echo "$KEY" > deploy.key
          chmod go-rwx deploy.key
          echo "::set-output name=filename::$(pwd)/deploy.key"

      - name: Add SSH configs
        run: |
          mkdir -p ~/.ssh
          echo "skynet.onoblends.co ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHPfzupCfPSZak6Ql1wy8Co2nP/5zWGxkjACX+1sHsZsYpJ2hi/+g7AyXC5ebcuKLwpeJMsdVBRCvwsa7RySFYY=" >> ~/.ssh/known_hosts
          echo Host deploy-server > ~/.ssh/config
          echo HostName skynet.onoblends.co >> ~/.ssh/config
          echo Port 22 >>  ~/.ssh/config
          echo User root >> ~/.ssh/config
          echo CheckHostIP no >> ~/.ssh/config
          echo IdentityFile ${{ steps.key.outputs.filename }} >> ~/.ssh/config

      - name: --------- Deploy To Remote ------------------------------------------------------------------------------
        run: ':'

      - name: Rsync build
        run: rsync --recursive --links --delete ${{ steps.build.outputs.path }}/ deploy-server:/home/prod/production

      - name: Copy Secrets and Configs
        run: scp secrets.conf configs.conf deploy-server:/etc/systemd/system/ono.runway.service.d/

      - name: Reload Systemd Configs
        run: ssh deploy-server systemctl daemon-reload

      - name: Stop Production Server
        run: ssh deploy-server systemctl stop ono.runway

      - name: Database Migration
        continue-on-error: true # or maybe we shouldn't
        run: 'ssh deploy-server echo TODO: Database Migration'

      - name: Restart Production Server
        # If a package update requires a reboot, do it now. Otherwise just start the daemon.
        run: ssh deploy-server \[ -e /var/run/reboot-required \] \&\& reboot \|\| systemctl start ono.runway

      - name: --------- Done Deploying --------------------------------------------------------------------------------
        run: ':'

      - name: Cleanup
        if: always()
        run: rm secrets.conf ${{ steps.key.outputs.filename }}
